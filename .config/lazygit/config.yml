os:
  open: "code -rg {{filename}}"
gui:
  # stuff relating to the UI
  scrollHeight: 10 # how many lines you scroll by
  scrollPastBottom: true # enable scrolling past the bottom
  sidePanelWidth: 0.3 # number from 0 to 1
  expandFocusedSidePanel: true
  mainPanelSplitMode: "flexible" # one of 'horizontal' | 'flexible' | 'vertical'
  theme:
    activeBorderColor:
      - green
      - bold
    inactiveBorderColor:
      - white
    optionsTextColor:
      - blue
    selectedLineBgColor:
      - underline
    selectedRangeBgColor:
      - reverse
  commitLength:
    show: true
  mouseEvents: true
  skipDiscardChangeWarning: false
  skipStashWarning: true
  showFileTree: true # for rendering changes files in a tree format
  nerdFontsVersion: "3" # nerd fonts version to use ("2" or "3"); empty means don't show nerd font icons
  border: "rounded" # one of 'single' | 'double' | 'rounded' | 'hidden'
git:
  commitPrefixes:
    bc-desktop-client:
      pattern: "^bcd-(\\d{4}).*"
      replace: "BCD-$1 "
    bc-homepage:
      pattern: "^bcd-(\\d{4}).*"
      replace: "BCD-$1 "
    terra-core.nvim:
      pattern: "^feature/dev-(\\d{3}).*"
      replace: "DEV-$1 "
  paging:
    useConfig: false
    colorArg: always
    pager: delta --dark --paging=never
  merging:
    # only applicable to unix users
    manualCommit: false
    # extra args passed to `git merge`, e.g. --no-ff
    args: ""
  skipHookPrefix: WIP
  autoFetch: true
  # The main branches. We colour commits green if they belong to one of these branches,
  # so that you can easily see which commits are unique to your branch (coloured in yellow)
  mainBranches: [master, main]
  branchLogCmd: "git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --"
  allBranchesLogCmd: "git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium"
  overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
  disableForcePushing: false
refresher:
  refreshInterval: 10 # file/submodule refresh interval in seconds
  fetchInterval: 60 # re-fetch interval in seconds
update:
  method: prompt # can be: prompt | background | never
  days: 14 # how often an update is checked for
confirmOnQuit: false
# determines whether hitting 'esc' will quit the application when there is nothing to cancel/close
quitOnTopLevelReturn: false
disableStartupPopups: false
notARepository: "skip" # one of: 'prompt' | 'create' | 'skip'
keybinding:
  universal:
    quit: "q"
    quit-alt1: "<c-c>" # alternative/alias of quit
    return: "<esc>" # return to previous menu, will quit if there's nowhere to return
    quitWithoutChangingDirectory: "Q"
    togglePanel: "<tab>" # goto the next panel
    prevItem: "<up>" # go one line up
    nextItem: "<down>" # go one line down
    prevItem-alt: "k" # go one line up
    nextItem-alt: "j" # go one line down
    prevPage: "," # go to next page in list
    nextPage: "." # go to previous page in list
    gotoTop: "<" # go to top of list
    gotoBottom: ">" # go to bottom of list
    prevBlock: "<left>" # goto the previous block / panel
    nextBlock: "<right>" # goto the next block / panel
    prevBlock-alt: "h" # goto the previous block / panel
    nextBlock-alt: "l" # goto the next block / panel
    nextMatch: "n"
    prevMatch: "N"
    optionMenu-alt1: "?" # show help menu
    select: "<space>"
    goInto: "<enter>"
    confirm: "<enter>"
    remove: "d"
    new: "n"
    edit: "e"
    openFile: "o"
    scrollUpMain: "<pgup>" # main panel scrool up
    scrollDownMain: "<pgdown>" # main panel scrool down
    scrollUpMain-alt1: "K" # main panel scrool up
    scrollDownMain-alt1: "J" # main panel scrool down
    scrollUpMain-alt2: "<c-u>" # main panel scrool up
    scrollDownMain-alt2: "<c-d>" # main panel scrool down
    executeCustomCommand: ":"
    createRebaseOptionsMenu: "m"
    pushFiles: "P"
    pullFiles: "p"
    refresh: "R"
    createPatchOptionsMenu: "<c-p>"
    nextTab: "]"
    prevTab: "["
    nextScreenMode: "+"
    prevScreenMode: "_"
    undo: "z"
    redo: "<c-z>"
    filteringMenu: "<c-s>"
    diffingMenu: "W"
    diffingMenu-alt: "<c-e>" # deprecated
    copyToClipboard: "<c-o>"
    submitEditorText: "<enter>"
  status:
    checkForUpdate: "u"
    recentRepos: "<enter>"
  files:
    commitChanges: "c"
    commitChangesWithoutHook: "w" # commit changes without pre-commit hook
    amendLastCommit: "A"
    commitChangesWithEditor: "C"
    ignoreFile: "i"
    refreshFiles: "r"
    stashAllChanges: "s"
    viewStashOptions: "S"
    toggleStagedAll: "a" # stage/unstage all
    viewResetOptions: "D"
    fetch: "f"
    toggleTreeView: "`"
  branches:
    createPullRequest: "o"
    checkoutBranchByName: "c"
    forceCheckoutBranch: "F"
    rebaseBranch: "r"
    mergeIntoCurrentBranch: "M"
    viewGitFlowOptions: "i"
    fastForward: "f" # fast-forward this branch from its upstream
    pushTag: "P"
    setUpstream: "u" # set as upstream of checked-out branch
    fetchRemote: "f"
  commits:
    squashDown: "s"
    renameCommit: "r"
    renameCommitWithEditor: "R"
    viewResetOptions: "g"
    markCommitAsFixup: "f"
    createFixupCommit: "F" # create fixup commit for this commit
    squashAboveCommits: "S"
    moveDownCommit: "<c-j>" # move commit down one
    moveUpCommit: "<c-k>" # move commit up one
    amendToCommit: "A"
    pickCommit: "p" # pick commit (when mid-rebase)
    revertCommit: "t"
    cherryPickCopy: "c"
    cherryPickCopyRange: "C"
    pasteCommits: "v"
    tagCommit: "T"
    checkoutCommit: "<space>"
    resetCherryPick: "<c-R>"
    copyCommitMessageToClipboard: "<c-y>"
  stash:
    popStash: "g"
  commitFiles:
    checkoutCommitFile: "c"
  main:
    toggleDragSelect: "v"
    toggleDragSelect-alt: "V"
    toggleSelectHunk: "a"
    pickBothHunks: "b"
  submodules:
    init: "i"
    update: "u"
    bulkMenu: "b"
